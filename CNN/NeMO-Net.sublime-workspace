{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "utils/NeMO_generator.py",
			"settings":
			{
				"buffer_size": 27441,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "utils/NeMO_layers.py",
			"settings":
			{
				"buffer_size": 5869,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "utils/NeMO_blocks.py",
			"settings":
			{
				"buffer_size": 21432,
				"line_ending": "Windows"
			}
		},
		{
			"file": "utils/NeMO_encoders.py",
			"settings":
			{
				"buffer_size": 21361,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "utils/NeMO_decoders.py",
			"settings":
			{
				"buffer_size": 6245,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "utils/NeMO_models.py",
			"settings":
			{
				"buffer_size": 7823,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "AL_NeMO_hyperparamopt_VGG16DeepLabV2_256.py",
			"settings":
			{
				"buffer_size": 6116,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "utils/loadcoraldata_utils.py",
			"settings":
			{
				"buffer_size": 27718,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "import numpy as np\nfrom numbers import Number\nfrom logging import warning\n\n\ndef unary_from_labels(labels, n_labels, gt_prob, zero_unsure=True):\n    \"\"\"\n    Simple classifier that is 50% certain that the annotation is correct.\n    (same as in the inference example).\n\n\n    Parameters\n    ----------\n    labels: numpy.array\n        The label-map, i.e. an array of your data's shape where each unique\n        value corresponds to a label.\n    n_labels: int\n        The total number of labels there are.\n        If `zero_unsure` is True (the default), this number should not include\n        `0` in counting the labels, since `0` is not a label!\n    gt_prob: float\n        The certainty of the ground-truth (must be within (0,1)).\n    zero_unsure: bool\n        If `True`, treat the label value `0` as meaning \"could be anything\",\n        i.e. entries with this value will get uniform unary probability.\n        If `False`, do not treat the value `0` specially, but just as any\n        other class.\n    \"\"\"\n    assert 0 < gt_prob < 1, \"`gt_prob must be in (0,1).\"\n\n    labels = labels.flatten()\n\n    n_energy = -np.log((1.0 - gt_prob) / (n_labels - 1))\n    p_energy = -np.log(gt_prob)\n\n    # Note that the order of the following operations is important.\n    # That's because the later ones overwrite part of the former ones, and only\n    # after all of them is `U` correct!\n    U = np.full((n_labels, len(labels)), n_energy, dtype='float32')\n    U[labels - 1 if zero_unsure else labels, np.arange(U.shape[1])] = p_energy\n\n    # Overwrite 0-labels using uniform probability, i.e. \"unsure\".\n    if zero_unsure:\n        U[:, labels == 0] = -np.log(1.0 / n_labels)\n\n    return U\n\n\ndef compute_unary(labels, M, GT_PROB=0.5):\n    \"\"\"Deprecated, use `unary_from_labels` instead.\"\"\"\n    warning(\"pydensecrf.compute_unary is deprecated, use unary_from_labels instead.\")\n    return unary_from_labels(labels, M, GT_PROB)\n\nAuburn, California\ndef unary_from_softmax(sm, scale=None, clip=1e-5):\n    \"\"\"Converts softmax class-probabilities to unary potentials (NLL per node).\n\n    Parameters\n    ----------\n    sm: numpy.array\n        Output of a softmax where the first dimension is the classes,\n        all others will be flattend. This means `sm.shape[0] == n_classes`.\n    scale: float\n        The certainty of the softmax output (default is None).\n        If not None, the softmax outputs are scaled to range from uniform\n        probability for 0 outputs to `scale` probability for 1 outputs.\n    clip: float\n        Minimum value to which probability should be clipped.\n        This is because the unary is the negative log of the probability, and\n        log(0) = inf, so we need to clip 0 probabilities to a positive value.\n    \"\"\"\n    num_cls = sm.shape[0]\n    if scale is not None:\n        assert 0 < scale <= 1, \"`scale` needs to be in (0,1]\"\n        uniform = np.ones(sm.shape) / num_cls\n        sm = scale * sm + (1 - scale) * uniform\n    if clip is not None:\n        sm = np.clip(sm, clip, 1.0)\n    return -np.log(sm).reshape([num_cls, -1]).astype(np.float32)\n\n\ndef softmax_to_unary(sm, GT_PROB=1):\n    \"\"\"Deprecated, use `unary_from_softmax` instead.\"\"\"\n    warning(\"pydensecrf.softmax_to_unary is deprecated, use unary_from_softmax instead.\")\n    scale = None if GT_PROB == 1 else GT_PROB\n    return unary_from_softmax(sm, scale, clip=None)\n\n\ndef create_pairwise_gaussian(sdims, shape):\n    \"\"\"\n    Util function that create pairwise gaussian potentials. This works for all\n    image dimensions. For the 2D case does the same as\n    `DenseCRF2D.addPairwiseGaussian`.\n\n    Parameters\n    ----------\n    sdims: list or tuple\n        The scaling factors per dimension. This is referred to `sxy` in\n        `DenseCRF2D.addPairwiseGaussian`.\n    shape: list or tuple\n        The shape the CRF has.\n\n    \"\"\"\n    # create mesh\n    hcord_range = [range(s) for s in shape]\n    mesh = np.array(np.meshgrid(*hcord_range, indexing='ij'), dtype=np.float32)\n\n    # scale mesh accordingly\n    for i, s in enumerate(sdims):\n        mesh[i] /= s\n    return mesh.reshape([len(sdims), -1])\n\n\ndef create_pairwise_bilateral(sdims, schan, img, chdim=-1):\n    \"\"\"\n    Util function that create pairwise bilateral potentials. This works for\n    all image dimensions. For the 2D case does the same as\n    `DenseCRF2D.addPairwiseBilateral`.\n\n    Parameters\n    ----------\n    sdims: list or tuple\n        The scaling factors per dimension. This is referred to `sxy` in\n        `DenseCRF2D.addPairwiseBilateral`.\n    schan: list or tuple\n        The scaling factors per channel in the image. This is referred to\n        `srgb` in `DenseCRF2D.addPairwiseBilateral`.\n    img: numpy.array\n        The input image.\n    chdim: int, optional\n        This specifies where the channel dimension is in the image. For\n        example `chdim=2` for a RGB image of size (240, 300, 3). If the\n        image has no channel dimension (e.g. it has only one channel) use\n        `chdim=-1`.\n\n    \"\"\"\n    # Put channel dim in right position\n    if chdim == -1:\n        # We don't have a channel, add a new axis\n        im_feat = img[np.newaxis].astype(np.float32)\n    else:\n        # Put the channel dim as axis 0, all others stay relatively the same\n        im_feat = np.rollaxis(img, chdim).astype(np.float32)\n\n    # scale image features per channel\n    # Allow for a single number in `schan` to broadcast across all channels:\n    if isinstance(schan, Number):\n        im_feat /= schan\n    else:\n        for i, s in enumerate(schan):\n            im_feat[i] /= s\n\n    # create a mesh\n    cord_range = [range(s) for s in im_feat.shape[1:]]\n    mesh = np.array(np.meshgrid(*cord_range, indexing='ij'), dtype=np.float32)\n\n    # scale mesh accordingly\n    for i, s in enumerate(sdims):\n        mesh[i] /= s\n\n    feats = np.concatenate([mesh, im_feat])\n    return feats.reshape([feats.shape[0], -1])\n\n\ndef _create_pairwise_gaussian_2d(sx, sy, shape):\n    \"\"\"\n    A simple reference implementation for the 2D case. The ND implementation\n    is faster.\n    \"\"\"\n    feat_size = 2\n    feats = np.zeros((feat_size, shape[0], shape[1]), dtype=np.float32)\n    for i in range(shape[0]):\n        for j in range(shape[1]):\n            feats[0, i, j] = i / sx\n            feats[1, i, j] = j / sy\n    return feats.reshape([feat_size, -1])\n\n\ndef _create_pairwise_bilateral_2d(sx, sy, sr, sg, sb, img):\n    \"\"\"\n    A simple reference implementation for the 2D case. The ND implementation\n    is faster.\n    \"\"\"\n    feat_size = 5\n    feats = np.zeros((feat_size, img.shape[0], img.shape[1]), dtype=np.float32)\n    for i in range(img.shape[0]):\n        for j in range(img.shape[1]):\n            feats[0, i, j] = i / sx\n            feats[1, i, j] = j / sy\n            feats[2, i, j] = img[i, j, 0] / sr\n            feats[3, i, j] = img[i, j, 1] / sg\n            feats[4, i, j] = img[i, j, 2] / sb\n    return feats.reshape([feat_size, -1])\n\n",
			"file": "/C/Users/Rechant/AppData/Local/Programs/Python/Python36/Lib/site-packages/pydensecrf-1.0rc2-py3.6-win-amd64.egg/pydensecrf/utils.py",
			"file_size": 6852,
			"file_write_time": 131641632432448737,
			"settings":
			{
				"buffer_size": 6870,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/Users/Rechant/Documents/pydensecrf-master/examples/inference.py",
			"settings":
			{
				"buffer_size": 5138,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "prv",
		"selected_items":
		[
			[
				"prv",
				"PackageResourceViewer: Open Resource"
			],
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 412.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Rechant/Documents/pydensecrf-master/tests/test_utils.py",
		"/C/Users/Rechant/Documents/pydensecrf-master/pydensecrf/utils.py",
		"/C/Users/Rechant/Documents/pydensecrf-master/pydensecrf/test_eigen.py",
		"/C/Users/Rechant/AppData/Local/Programs/Python/Python36/Lib/site-packages/pydensecrf-1.0rc2-py3.6-win-amd64.egg/pydensecrf/eigen.cp36-win_amd64.pyd",
		"/C/Users/Rechant/AppData/Local/Programs/Python/Python36/Lib/site-packages/pydensecrf-1.0rc2-py3.6-win-amd64.egg/pydensecrf/densecrf.py",
		"/C/Users/Rechant/AppData/Local/Programs/Python/Python36/Lib/site-packages/pydensecrf-1.0rc2-py3.6-win-amd64.egg/pydensecrf/eigen.py",
		"/C/Users/Rechant/AppData/Local/Programs/Python/Python36/Lib/site-packages/pydensecrf-1.0rc2-py3.6-win-amd64.egg/pydensecrf/utils.py",
		"/C/Users/Rechant/Documents/pydensecrf-master/examples/inference.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/NeMO_functional_encoders.py",
		"/C/Users/Rechant/AppData/Local/Programs/Python/Python36/Lib/site-packages/keras/engine/training.py",
		"/C/Users/Rechant/AppData/Local/Programs/Python/Python36/Lib/site-packages/keras/utils/generic_utils.py",
		"/C/Users/Rechant/AppData/Local/Programs/Python/Python36/Lib/site-packages/keras/engine/topology.py",
		"/C/Users/Rechant/AppData/Local/Programs/Python/Python36/Lib/site-packages/keras/models.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/Test_CustomModelLoad.py",
		"/C/Users/Rechant/AppData/Local/Programs/Python/Python36/Lib/site-packages/keras/layers/__init__.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/loadcoraldata_utils.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/NeMO_blocks.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/AL_NeMO_hyperparamopt_VGG16FCN_64.py",
		"/C/Users/Rechant/AppData/Local/Programs/Python/Python36/Lib/site-packages/keras/preprocessing/image.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/AL_NeMO_hyperparamopt_4AlexNet.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/Keras_AlexNetHyperOpt_FullVisualization.ipynb",
		"/F/faceswap-GAN-master/FaceSwap_GAN_v2_train.py",
		"/F/faceswap-GAN-master/utils.py",
		"/C/Users/Rechant/AppData/Local/Programs/Python/Python36/Lib/site-packages/tensorflow/contrib/framework/__init__.py",
		"/F/face-swap/model.py",
		"/F/face-swap/image_augmentation.py",
		"/F/face-swap/pixel_shuffler.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/NeMO_FCN.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/AL_NeMO_hyperparamopt_4AlexNetParallel.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/NeMO_layers.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/Test_NeMO_generator.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/init_args - VGG16FCN_Raster.yml",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/Test_NeMO_generator",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/NeMO_callbacks.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/Keras_FCNHyperOpt_FullVisualization.ipynb",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/NeMO_hyperparamopt_4FCN.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/tests/test_encoders.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/tests/test_models.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/NeMO_hyperparamopt_4AlexNet.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/init_args - AlexNetParallel_Raster.yml",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/Keras_AlexNet.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/tests/test_blocks.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/NeMO_AlexNet.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/NeMO_ResNet34.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/output/hyperas_NeMO_AlexNettest_log.csv",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/hyperparamopt_utils/train2opt.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/Keras_AlexNetFullVisualize.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/TestCoralUtil.ipynb",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/NeMO_models.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/init_args - AlexNet.yml",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/NeMO_generator.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/hyperparamopt_utils/hyperas_example_with_fit_generator.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/NeMO_encoders.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/AL_NeMO_hyperopt_AlexNet.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/.gitignore",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/hyperparamopt_utils/temp_model.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/hyperparamopt_utils/lstm.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/output/hyperas_AlexNet_hyperopttest_log.csv",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/globalvars.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/Untitled.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/temp_model.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/hyperparamopt_utils/hyperopt_example.py",
		"/C/Users/Rechant/AppData/Local/Programs/Python/Python36/Lib/site-packages/hyperopt/pyll/base.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/NeMO_AlexNet.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/alignUAVtoSat/cvk2.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/NeMO_backend.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/alignUAVtoSat/Match_Images.py",
		"/C/Users/Rechant/Documents/GitHub/keras-fcn/voc2011/train.py",
		"/C/Users/Rechant/Documents/GitHub/keras-fcn/voc2011/score.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/NeMOgenerator.py",
		"/C/Users/Rechant/Documents/GitHub/keras-fcn/tests/test_models.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/tests/test_NeMOgenerator.py",
		"/C/Users/Rechant/Documents/GitHub/keras-fcn/voc2011/test_voc_generator.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/NeMO_decoders.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/loadcoraldata_utils.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/tests/test_decoders.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/tests/test_losses.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/common.py",
		"/C/Users/Rechant/Documents/GitHub/keras-fcn/keras_fcn/backend/tensorflow_backend.py",
		"/C/Users/Rechant/Documents/GitHub/keras-fcn/keras_fcn/losses.py",
		"/C/Users/Rechant/Documents/GitHub/keras-fcn/keras_fcn/callbacks.py",
		"/C/Users/Rechant/Documents/GitHub/keras-fcn/keras_fcn/backend/common.py",
		"/C/Users/Rechant/Documents/GitHub/keras-fcn/keras_fcn/encoders.py",
		"/C/Users/Rechant/Documents/GitHub/keras-fcn/keras_fcn/__init__.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/NeMO_losses.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/tests/test_layers.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/callbacks.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/losses.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/models.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/blocks.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/test_layers.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/test_NeMOgenerator.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/NeMOlayers.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/layers.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/encoders.py",
		"/C/Users/Rechant/Documents/GitHub/keras-fcn/setup.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/test_sample.py",
		"/C/Users/Rechant/Documents/GitHub/keras-fcn/voc2011/voc_generator.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/test_NeMO_voc_generator.py",
		"/C/Users/Rechant/Documents/GitHub/NeMO-NET/CNN/utils/NeMO_voc_generator.py",
		"/C/Users/Rechant/Documents/GitHub/keras-fcn/keras_fcn/models.py",
		"/C/Users/Rechant/Documents/GitHub/keras-fcn/voc2011/__init__.py",
		"/C/Users/Rechant/Documents/MachineLearning/mnist_mlp.py",
		"/C/Users/Rechant/AppData/Roaming/Sublime Text 3/Packages/Color Scheme - Default/Monokai.tmTheme",
		"/C/Users/Rechant/AppData/Roaming/Sublime Text 3/Packages/Theme - Default/Default.sublime-theme"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"convert_all",
			"classifyback",
			"deepcopy",
			"get_config",
			"layer",
			"__init__",
			"super",
			"output_tensors",
			"lambda",
			"yield",
			"lrD",
			"pool_concat",
			"scaling",
			"labelkey",
			"summary",
			"img_to_array",
			"classifyback",
			"data_format",
			"_rescale",
			"uint8",
			"str(lr)",
			"optModel",
			"input_shape",
			"numpy",
			"except",
			"HEAD",
			"classes",
			"n",
			"space",
			"optModel",
			"space",
			"numpy",
			"trials",
			"batch_size",
			"iterator",
			"img_to_array",
			"temp.tif",
			"directoryIterator",
			"flow_from_direc",
			"flow_from",
			"fname",
			"index_array",
			"self.index_generator",
			"uint",
			"f.write",
			"get_file",
			"gray",
			"counter",
			"get_file",
			"load_seg",
			"datagen",
			"image_resample",
			"rescale",
			"offset",
			"index_generator",
			"IndexIterator",
			"IndexGenerator",
			"load_seg",
			"keras_fcn",
			"keras_func",
			"NeMO",
			"increment_var",
			"FCN",
			"index_generator",
			"IndexI",
			"indexiterator"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"np"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 9,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "utils/NeMO_generator.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27441,
						"regions":
						{
						},
						"selection":
						[
							[
								14048,
								14048
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 796.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "utils/NeMO_layers.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5869,
						"regions":
						{
						},
						"selection":
						[
							[
								447,
								447
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 90.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "utils/NeMO_blocks.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21432,
						"regions":
						{
						},
						"selection":
						[
							[
								7421,
								7426
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1919.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "utils/NeMO_encoders.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21361,
						"regions":
						{
						},
						"selection":
						[
							[
								3028,
								3028
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5320.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "utils/NeMO_decoders.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6245,
						"regions":
						{
						},
						"selection":
						[
							[
								3899,
								3899
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1755.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "utils/NeMO_models.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7823,
						"regions":
						{
						},
						"selection":
						[
							[
								3199,
								3199
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 540.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "AL_NeMO_hyperparamopt_VGG16DeepLabV2_256.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6116,
						"regions":
						{
						},
						"selection":
						[
							[
								6116,
								6116
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1843.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "utils/loadcoraldata_utils.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27718,
						"regions":
						{
						},
						"selection":
						[
							[
								27495,
								27495
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6507.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/C/Users/Rechant/AppData/Local/Programs/Python/Python36/Lib/site-packages/pydensecrf-1.0rc2-py3.6-win-amd64.egg/pydensecrf/utils.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6870,
						"regions":
						{
						},
						"selection":
						[
							[
								5302,
								5302
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2129.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/C/Users/Rechant/Documents/pydensecrf-master/examples/inference.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5138,
						"regions":
						{
						},
						"selection":
						[
							[
								3803,
								3803
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1170.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "NeMO-Net.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
